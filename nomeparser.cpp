//#include "parser.cpp"
//#include "lexer.cpp"
#include "nomeparser.h"
//#include "nomeFlexBison.cpp"

//namespace parserNom
//{
// This header is generated by Flex.
//#include "compilerNome\lexer.h"
//#include "compilerNome\parser.h"


//#include "compilerNome\lexer.cpp"

// This header is generated by bison.
//extern "C"{
#include "compilerNome\parser.hpp"
//}


//}

//#include "compilerNome\lex.nom.c"
//#include "compilerNome\y.tab.h"

//#include "compilerStl\lexerStl.cpp"

// This header is generated by bison.
//#include "compilerStl\parserStl.cpp"

NomeParser::NomeParser()
{

}

Session* NomeParser::makeWithNome(vector<ParameterBank> &banks,
                              unordered_map<string, Parameter> &params,
                              Group &group,
                              string input,
                              vector<string> &colorlines,
                              vector<string> &banklines,
                              vector<string> &geometrylines,
                              vector<int> &postProcessingLines,
                              vector<string> &postProcessingLinesString,
                              unordered_map<string, Vertex*> &global_vertices, unordered_map<string, Face*> &global_faces)
{
extern FILE* nomin;
    nomin = fopen(input.c_str(), "r");
    Session *currSession = createSession();
    currSession->saveFileToStr(input);
    nomparse(currSession);


    //currSession->saveFileToStr(input);
    //nomin = fopen(input.c_str(), "r");
    //nomparse();

    //stlin = fopen(input.c_str(), "r");
    //stlparse();

    //NOMECompiler* nomeCompilerSession = new NOMECompiler (input);
    //return nomeCompilerSession->getSession();
    //return NULL;
    return currSession;
}

